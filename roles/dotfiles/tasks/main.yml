---
# tasks file for dotfiles

######################################
### packages

- name: "Dotfiles: Manage packages"
  become: true
  ansible.builtin.package:
    name: "{{ dotfiles_package }}"
    state: "{{ dotfiles_package_state }}"

- name: "Dotfiles: Manage eww bin"
  become: true
  ansible.builtin.copy:
    src: eww-bin
    dest: /usr/local/bin/eww
    owner: root
    group: root
    mode: "0755"

######################################
### jobs

- name: "Dotfiles: Manage bash profile"
  become: true
  ansible.builtin.copy:
    src: ansible-bash.sh
    dest: /etc/profile.d/ansible-bash.sh
    owner: root
    group: root
    mode: "0644"
  when:
    - dotfiles_bashprofile_enabled | bool

- name: "Dotfiles: Manage vim directory"
  become: true
  ansible.builtin.file:
    path: /etc/vim
    owner: root
    group: root
    mode: "0755"
    state: directory

- name: "Dotfiles: Manage vimrc"
  become: true
  ansible.builtin.copy:
    src: vim/vimrc
    dest: /etc/vimrc.local
    owner: root
    group: root
    mode: "0644"

- name: "Dotfiles: Manage vim files"
  become: true
  ansible.builtin.copy:
    src: vim/{{ item }}
    dest: /etc/vim/{{ item }}
    owner: root
    group: root
    mode: "0644"
  loop:
    - autocmd.vim
    - bundles.vim
    - functions.vim
    - map.vim
    - plugins.vim
    - settings.vim

- name: "Dotfiles: Manage inputrc"
  become: true
  ansible.builtin.blockinfile:
    block: "{{ lookup('ansible.builtin.file', 'files/inputrc') }}"
    path: "{{ dotfiles_inputrc_file }}"
    state: "{{ dotfiles_inputrc_state }}"
  when:
    - dotfiles_inputrc_state != 'skip'

- name: "Dotfiles: Manage wofi files"
  ansible.builtin.copy:
    src: wofi
    dest: /home/{{ ansible_user }}/.config/
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0644"

- name: "Dotfiles: Manage swaync files"
  ansible.builtin.copy:
    src: swaync
    dest: /home/{{ ansible_user }}/.config/
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0644"

- name: "Dotfiles: Manage kitty files"
  ansible.builtin.copy:
    src: kitty
    dest: /home/{{ ansible_user }}/.config/
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0644"

- name: "Dotfiles: Manage hypr files"
  ansible.builtin.copy:
    src: hypr
    dest: /home/{{ ansible_user }}/.config/
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0644"

- name: "Dotfiles: Manage eww files"
  ansible.builtin.copy:
    src: eww
    dest: /home/{{ ansible_user }}/.config/
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0644"

- name: "Dotfiles: Manage helix files"
  become: true
  ansible.builtin.copy:
    src: helix
    dest: "{{ item.path }}/.config/"
    owner: "{{ item.user }}"
    group: "{{ item.user }}"
    mode: "0644"
  with_items:
    - { path: "/root", user: "root" }
    - { path: "/home/{{ ansible_user }}", user: "{{ ansible_user }}" }

- name: "Dotfiles: Create user systemd directory"
  become: true
  ansible.builtin.file:
    path: /home/{{ ansible_user }}/.config/systemd/user
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    recurse: true
    mode: "0755"

- name: "Dotfiles: Copy systemd service"
  become: true
  ansible.builtin.copy:
    src: ssh-agent/{{ dotfiles_ssh_agent_service_name }}
    dest: /home/{{ ansible_user }}/.config/systemd/user/{{ dotfiles_ssh_agent_service_name }}
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0744"

######################################
### services

- name: "Dotfiles: Systemd reread configs"
  become_user: "{{ ansible_user }}"
  become: true
  ansible.builtin.systemd:
    daemon_reload: true
    scope: user

- name: "Dotfiles: Manage services"
  become_user: "{{ ansible_user }}"
  become: true
  ansible.builtin.systemd:
    name: "{{ dotfiles_ssh_agent_service_name }}"
    state: "{{ dotfiles_ssh_agent_service_state }}"
    enabled: "{{ dotfiles_ssh_agent_service_enabled }}"
    scope: user
