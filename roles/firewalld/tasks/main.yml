---
# tasks file for firewalld

######################################
### packages

- name: "Firewalld: Manage packages"
  become: true
  ansible.builtin.package:
    name: "{{ firewalld_package }}"
    state: "{{ firewalld_package_state }}"
  notify:
    - "Firewalld: Restart"

######################################
### services

- name: "Firewalld: Manage services"
  become: true
  ansible.builtin.service:
    name: "{{ firewalld_service_name }}"
    state: "{{ firewalld_service_state }}"
    enabled: "{{ firewalld_service_enabled }}"
  when:
    - firewalld_package_state != 'absent'

######################################
### jobs

- name: "Firewalld: Create zones"
  become: true
  ansible.posix.firewalld:
    permanent: true
    immediate: false
    zone: "{{ item.zone }}"
    state: present
  with_items: "{{ firewalld_zones_define | default({}) }}"
  notify:
    - "Firewalld: Reload"
  when:
    - firewalld_package_state != 'absent'

- name: "Firewalld: Manage LogDenied"
  become: true
  ansible.builtin.lineinfile:
    path: /etc/firewalld/firewalld.conf
    regexp: ^LogDenied=
    line: LogDenied={{ firewalld_logging }}
    state: present
    backrefs: true
  notify:
    - "Firewalld: Reload"
  when:
    - firewalld_package_state != 'absent'

- name: "Firewalld: Force reload"
  become: true
  ansible.builtin.command: firewall-cmd --reload
  register: firewalld_reload
  changed_when: firewalld_reload.rc != 0
  when:
    - firewalld_package_state != 'absent'

- name: "Firewalld: Manage zones"
  become: true
  ansible.posix.firewalld:
    permanent: "{{ firewalld_permanent }}"
    immediate: "{{ firewalld_immediate }}"
    source: "{{ item.source }}"
    zone: "{{ item.zone }}"
    state: enabled
  with_items: "{{ firewalld_zones_define | default({}) }}"
  notify:
    - "Firewalld: Restart"
  when:
    - firewalld_package_state != 'absent'

- name: "Firewalld: Manage default zone"
  become: true
  ansible.builtin.command: firewall-cmd --set-default-zone={{ firewalld_default_zone }}
  register: firewall_zone
  changed_when: firewall_zone.rc != 0
  when:
    - firewalld_package_state != 'absent'

- name: "Firewalld: Rule ICMP"
  become: true
  ansible.posix.firewalld:
    permanent: "{{ firewalld_permanent }}"
    immediate: "{{ firewalld_immediate }}"
    icmp_block: "{{ item.icmp_type }}"
    zone: "{{ item.zone }}"
    state: "{{ item.state }}"
  with_items: "{{ firewalld_rules_icmp | default({}) }}"
  when:
    - firewalld_package_state != 'absent'

- name: "Firewalld: Rule services"
  become: true
  ansible.posix.firewalld:
    permanent: "{{ firewalld_permanent }}"
    immediate: "{{ firewalld_immediate }}"
    service: "{{ item.service }}"
    zone: "{{ item.zone }}"
    state: "{{ item.state }}"
  with_items: "{{ firewalld_rules_services | default({}) }}"
  when:
    - firewalld_package_state != 'absent'

- name: "Firewalld: Rule ports"
  become: true
  ansible.posix.firewalld:
    permanent: "{{ firewalld_permanent }}"
    immediate: "{{ firewalld_immediate }}"
    port: "{{ item.port }}/{{ item.protocol }}"
    zone: "{{ item.zone }}"
    state: "{{ item.state }}"
  with_items: "{{ firewalld_rules_ports | default({}) }}"
  when:
    - firewalld_package_state != 'absent'

- name: "Firewalld: Richrule ports"
  become: true
  ansible.posix.firewalld:
    permanent: "{{ firewalld_permanent }}"
    immediate: "{{ firewalld_immediate }}"
    rich_rule: rule family=ipv4 source address={{ item.allowip }} port port={{ item.port }} protocol={{ item.protocol }} {{ item.action }}
    zone: "{{ item.zone }}"
    state: enabled
  with_items: "{{ firewalld_richrules_ports | default({}) }}"
  when:
    - firewalld_package_state != 'absent'

- name: "Firewalld: Richrule services"
  become: true
  ansible.posix.firewalld:
    permanent: "{{ firewalld_permanent }}"
    immediate: "{{ firewalld_immediate }}"
    rich_rule: rule family=ipv4 source address={{ item.allowip }} service name={{ item.service }} {{ item.action }}
    zone: "{{ item.zone }}"
    state: enabled
  with_items: "{{ firewalld_richrules_services | default({}) }}"
  when:
    - firewalld_package_state != 'absent'
